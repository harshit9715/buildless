# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build:
    runs-on: ubuntu-latest
    environment: 
      name: dev # If there are build parammeters then use this. (this is different from CDK parameters, they come later.)
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache UI node modules for UI
        id: node_cache_ui
        env:
          cache-name: node_cache_ui
        uses: actions/cache@v2
        with:
          path: myreactapp/node_modules
          key: ${{ runner.OS }}-ui-build-${{ hashFiles('**/myreactapp/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-ui-build-${{ env.cache-name }}-
            ${{ runner.OS }}-ui-build-
            ${{ runner.OS }}-ui-
      - name: UI cache found?
        run: echo ${{ steps.node_cache_ui.outputs.cache-hit }}
      - name: Install dependencies if UI cache not found
        if: steps.node_cache_ui.outputs.cache-hit != 'true'
        run: cd myreactapp; npm ci; cd ..
      - run: cd myreactapp; SKIP_PREFLIGHT_CHECK=true npm run build --if-present; cd ..
        env:
          REACT_APP_NAME_PH: BUILD_NAME_PH
          REACT_APP_STAGE_PH: BUILD_STAGE_PH
      - uses: actions/upload-artifact@v2
        with:
          name: UI_build_raw
          path: myreactapp/build/ # or path/to/artifact

  Validate_Stack:
    name: Validate Cfn Stack
    runs-on: ubuntu-latest
    environment: 
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache CDK node modules for Backend
        id: node_cache_cdk
        env:
          cache-name: node_cache_cdk
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: CDK cache found?
        run: echo ${{ steps.node_cache_cdk.outputs.cache-hit }}
      - name: Install dependencies if CDK cache not found!
        if: steps.node_cache_cdk.outputs.cache-hit != 'true'
        run: npm ci;

      - name: CDK Diff PR run
        id: cdk-diff-step
        run: |
          echo "::set-output name=cdk-diff::$(npx cdk diff)\n"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}
          

      - name: Comment on PR
        run: |
          echo ${{join(steps.cdk-diff-step.outputs.*, '\n')}}
#         if: always() && github.event_name == 'pull_request'
#         run: |
#           commentWrapper="#### \`cdk diff` ${{ job.status }} \
#           <details><summary>Show Output</summary> \
#           \`\`\`
#           ${{join(steps.cdk-diff-step.outputs.*, '\n')}}
#           \`\`\`
#           </details>
#           *Workflow: \`${GITHUB_WORKFLOW}\`, Action: \`${GITHUB_ACTION}\`, Working Directory: \`${INPUT_WORKING_DIR}\`*"

#               payload=$(echo "${commentWrapper}" | jq -R --slurp '{body: .}')
#               commentsURL=$(cat ${GITHUB_EVENT_PATH} | jq -r .pull_request.comments_url)

#               echo "${payload}" | curl -s -S -H "Authorization: token ${GITHUB_TOKEN}" --header "Content-Type: application/json" --data @- "${commentsURL}" > /dev/null
#             fi
#           }
  


  DeployDev:
    name: Deploy to Dev 
    if: github.event_name == 'pull_request'
    needs: [Build, Validate_Stack]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'http://build-with-sed-dev.s3-website.ap-south-1.amazonaws.com/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: UI_build_raw
          path: myreactapp/build
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache CDK node modules for Backend
        id: node_cache_cdk
        uses: actions/cache@v2
        env:
          cache-name: node_cache_cdk
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: CDK cache found?
        run: echo ${{ steps.node_cache_cdk.outputs.cache-hit }}
      - name: Install dependencies if CDK cache not found!
        if: steps.node_cache_cdk.outputs.cache-hit != 'true'
        run: npm ci;
      - name: CDK Deploy Dev
        run: npx cdk diff # deploy to Dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      # Deploy push to AWS S3
      - name: Hydrate UI with Parameters
        run: |
          cd myreactapp/build;
          find . -type f -exec grep -Iq . {} \; -exec sed -i 's/BUILD_NAME_PH/${{secrets.NAME}}/g' {} +
          find . -type f -exec grep -Iq . {} \; -exec sed -i 's/BUILD_STAGE_PH/dev/g' {} +
          cd ../../
      - name: AWS Deploy to dev
        run: aws s3 sync myreactapp/build s3://${{ secrets.S3_BUCKET_NAME }} --delete

  DeployStaging:
    name: Deploy to Staging 
    if: github.event.ref == 'refs/heads/main'
    needs: [Build, Validate_Stack]
    runs-on: ubuntu-latest
    environment: 
      name: stage
      url: 'http://build-with-sed-stg.s3-website.ap-south-1.amazonaws.com/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: UI_build_raw
          path: myreactapp/build
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache CDK node modules for Backend
        id: node_cache_cdk
        env:
          cache-name: node_cache_cdk
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: CDK cache found?
        run: echo ${{ steps.node_cache_cdk.outputs.cache-hit }}
      - name: Install dependencies if CDK cache not found!
        if: steps.node_cache_cdk.outputs.cache-hit != 'true'
        run: npm ci;

      - name: CDK Deploy to Stage
        run: npx cdk diff
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      # Deploy push to AWS S3
      - name: Hydrate UI with Parameters
        run: |
          cd myreactapp/build;
          find . -type f -exec grep -Iq . {} \; -exec sed -i 's/BUILD_NAME_PH/harshit/g' {} +
          find . -type f -exec grep -Iq . {} \; -exec sed -i 's/BUILD_STAGE_PH/stage/g' {} +
          cd ../../
      - name: AWS Deploy to Stage
        run: aws s3 sync myreactapp/build s3://${{ secrets.S3_BUCKET_NAME }} --delete

  DeployProd:
    name: Deploy to Production 
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: prod
      url: 'http://build-with-sed-prod.s3-website.ap-south-1.amazonaws.com/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: UI_build_raw
          path: myreactapp/build
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache CDK node modules for Backend
        id: node_cache_cdk
        env:
          cache-name: node_cache_cdk
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: CDK cache found?
        run: echo ${{ steps.node_cache_cdk.outputs.cache-hit }}
      - name: Install dependencies if CDK cache not found!
        if: steps.node_cache_cdk.outputs.cache-hit != 'true'
        run: npm ci;

      - name: CDK Deploy Prod
        run: npx cdk diff
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      # Deploy push to AWS S3
      - name: Hydrate UI with Parameters
        run: |
          cd myreactapp/build;
          find . -type f -exec grep -Iq . {} \; -exec sed -i 's/BUILD_NAME_PH/harshit/g' {} +
          find . -type f -exec grep -Iq . {} \; -exec sed -i 's/BUILD_STAGE_PH/prod/g' {} +
          cd ../../
      - name: AWS Deploy to Prod
        run: aws s3 sync myreactapp/build s3://${{ secrets.S3_BUCKET_NAME }} --delete
      
